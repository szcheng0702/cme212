This project aims to demonstrate a spiral pattern formation in the Belousov-Zhabotinsky system. In general, here we use the cellular automaton approach, building a class called "bz_model" to simulate the chemical diffusion and reaction process in 2D and present the visual display using the SFML viewer. To run this code, simply type "make" in the terminal and run it by typing "./final".

Users can choose the size of grid, number of reactants, and also the size of the box when using this model. Moreover, a 3D boost::multi_array array should also be passed to the constructor of the "bz_model" with extents equal to the size of grids in 2D and number of reactants respectly.

I design this class simply by providing two methods, a void function to simulate the diffusion process (called "updatediffusion") and another to simulate the reaction process (called "updatereaction"). The diffusion process is modeled based on the box average approach and use the periodic boundary conditions. The chemical reaction process is modeled using discrete time steps map. The representation invariants in these two methods are three preconditions. First, the 3D boost::multi_array array should have extents equal to the length of the gridth, width of the gridth, and the number of reactants. Second, for a given grid cell, elements should sum up to 1 if summing over the third dimension. Last, all the elements in this 3D boost::multi-array array should be positive since they represent the mass fractions.

The idea of RAII is demonstrated here because we store all of our information of the Belousov-Zhabotinsky system in an object of "bz_model". When the main function returns and the class "bz_model" calls its default destructor to destroy the object, all memories are automatically freed. The move semantics is not used here because the copy constructor of "bz_model" is unnecesssary for the purpose of this project. 

Currently we only have fixed value for the chemical rate constants because we don't have informaiton what the actual discrete time map is for more than three reactants. To improve this templated class, we can use varadiac templates to take as many chemical rate constants as possible as the input argumets. The input rate constants can overwrite the current three fixed rate constants and introduce more for the discrete time map once the user defines them.